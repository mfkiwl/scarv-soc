
VERILATOR   = $(VERILATOR_ROOT)/bin/verilator

VL_DIR      = $(SOC_WORK)/verilator
VL_OUT      = $(SOC_WORK)/verilator/verilated

VL_WAVES    = $(VL_DIR)/waves.vcd
VL_TIMEOUT  = 10000
VL_ARGS     = 

VL_CSRC_DIR =$(SOC_HOME)/verif/scarv-soc

VL_CSRC     = $(VL_CSRC_DIR)/main.cpp \
              $(VL_CSRC_DIR)/dut_wrapper.cpp \
              $(VL_CSRC_DIR)/testbench.cpp

VL_FLAGS    = --cc -CFLAGS "-O2" -O3 -CFLAGS -g\
               -I$(SCARV_CPU_RTL_DIR) \
               --exe --trace \
               --top-module scarv_soc $(VL_BUILD_FLAGS)

VL_RTL_MANIFEST = $(SOC_HOME)/flow/verilator/scarv-soc-rtl.manifest
VL_CPP_MANIFEST = $(SOC_HOME)/flow/verilator/scarv-soc-testbench.manifest

# Defined in $(SOC_HOME)/src/fsbl/Makefile.in
BRAM_ROM_MEMH   = $(FSBL_HEX)

.PHONY: $(VL_CSRC)

#
# Add a new verilator build
#
# 1 - Output verilated executable
# 2 - verilator working directory.
# 3 - ROM memory file
# 4 - RAM memory file
#
define tgt_verilator_build

${1} : $(VL_CSRC)
	@mkdir -p ${2}
	$(VERILATOR) $(VL_FLAGS)  --Mdir ${2} -o ${1} \
        -GBRAM_ROM_MEMH_FILE="\"$(strip ${3})\"" \
        -GBRAM_RAM_MEMH_FILE="\"$(strip ${4})\"" \
        -f $(VL_RTL_MANIFEST) \
        -f $(VL_CPP_MANIFEST)
	$(MAKE) -C ${2} -f Vscarv_soc.mk

endef

$(eval $(call tgt_verilator_build,$(VL_OUT),$(VL_DIR),rom.hex,ram.hex))

verilator-build: $(VL_OUT)

verilator-run-waves: $(VL_OUT) $(FSBL_HEX)
	cp $(FSBL_HEX) $(dir $(VL_OUT))rom.hex
	cp $(FSBL_HEX) $(dir $(VL_OUT))ram.hex
	cd $(dir $(VL_OUT)) && $(VL_OUT) $(VL_ARGS) \
        +WAVES=$(VL_WAVES) \
        +TIMEOUT=$(VL_TIMEOUT)

verilator-clean:
	rm -rf $(VL_DIR)

